"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OSCClient = void 0;
var dgram = __importStar(require("dgram"));
var osc_min_1 = require("osc-min");
/**
 * OSC Client, handles sending OSC messages

   ```
   const osc = new OSCClient("192.168.0.44", 8000);
   ```
 */
var OSCClient = /** @class */ (function () {
    function OSCClient(host, port) {
        this.host = host;
        this.port = port;
        this.socket = dgram.createSocket({ type: 'udp4', reuseAddr: true });
    }
    OSCClient.prototype.sendPacket = function (packet) {
        this.socket.send(packet, 0, packet.length, this.port, this.host);
    };
    /**
     * Send an OSC message
       ```
       osc.send("/osc/url", OSCType.String, "hello");
       ```
     */
    OSCClient.prototype.send = function (address, type, value) {
        var arg = {
            type: type,
            value: value,
        };
        var encoded = osc_min_1.toBuffer(address, [arg]);
        this.sendPacket(encoded);
    };
    /**
     * Close the connection
     */
    OSCClient.prototype.close = function () {
        this.socket.close();
    };
    return OSCClient;
}());
exports.OSCClient = OSCClient;
