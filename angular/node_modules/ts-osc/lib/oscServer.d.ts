/// <reference types="node" />
import EventEmitter = require('events');
import * as dgram from 'dgram';
import { OSCType, OSCArgumentType } from './types';
export interface ReceivedOSCMessage<T extends OSCType> {
    address: string;
    type: T;
    value: OSCArgumentType<T>;
}
export declare interface OSCServer {
    /**
         Emitted whenever an OSC message is received on inPort
         @event
       */
    on(event: 'message', listener: <T extends OSCType>(message: ReceivedOSCMessage<T>) => void): this;
    /**
         Emitted when OSC client is listening on inPort
         @event
       */
    on(event: 'listening', listener: () => void): this;
    /**
     * Emitted when OSC socket is closed
       @event
     */
    on(event: 'close', listener: () => void): this;
    /**
     * Emitted whenever an error occurs
       @event
     */
    on(event: 'error', listener: (exception: Error) => void): this;
}
/**
 * OSC Server, handles receiving OSC messages

   ```
   const osc = new OSCServer("192.168.0.44", 8000);
   ```
 */
export declare class OSCServer extends EventEmitter {
    socket: dgram.Socket;
    constructor(bindAddress: string, port: number);
    /**
     * close the server
     */
    close(): void;
}
