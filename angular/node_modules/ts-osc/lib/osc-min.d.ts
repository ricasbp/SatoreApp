declare module 'osc-min' {
  import { OSCType, OSCArgumentType, OSCArgument } from '../types';

  export type OSCTimeTag = [number, number];
  export type OutgoingOSCArgsTypes = (OSCArgument<OSCType> | Buffer | boolean | string | number)[];

  export interface OSCMessage {
    oscType?: 'message';
    address: string;
    args: OSCArgument<OSCType>[];
  }

  export interface OutgoingOSCMessage extends OSCMessage {
    args: OutgoingOSCArgsTypes;
  }

  export interface OSCBundle {
    oscType: 'bundle';
    timetag: null | number | Date | OSCTimeTag;
    elements: (OSCMessage | OSCBundle)[];
  }

  type OSCPacket = OSCMessage | OSCBundle;

  export function fromBuffer(buffer: Buffer, strict?: boolean): OSCPacket;
  export function toBuffer(object: OutgoingOSCMessage, strict?: boolean): Buffer;
  export function toBuffer(address: string, args: OSCArgument<OSCType>[], strict?: boolean): Buffer;
  export function applyMessageTransform(msg: Buffer, transform: (message: OSCMessage) => OSCMessage);
  export function applyAddressTransform(msg: Buffer, transform: (address: string) => string);
  export function timetagToDate(ntpTimeTag: OSCTimeTag): Date;
  export function dateToTimetag(date: Date): OSCTimeTag;
  export function timetagToTimestamp(timeTag: OSCTimeTag): number;
  export function timestampToTimetag(timestamp: number);
  OSCTimeTag;
}
